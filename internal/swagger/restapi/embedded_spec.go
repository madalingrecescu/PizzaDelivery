// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "API for user registration and management.",
    "title": "User Microservice API",
    "version": "1.0.0"
  },
  "paths": {
    "/login": {
      "post": {
        "description": "Authenticate and log in a user.",
        "tags": [
          "Users"
        ],
        "summary": "User Login",
        "parameters": [
          {
            "description": "User login data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "description": "The email address of the user.",
                  "type": "string",
                  "format": "email"
                },
                "password": {
                  "description": "The user's password.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "description": "Authentication token for the user's session",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid credentials"
          }
        }
      }
    },
    "/signup": {
      "post": {
        "description": "Register a new user account.",
        "tags": [
          "Users"
        ],
        "summary": "User Registration",
        "parameters": [
          {
            "description": "User registration data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username",
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "description": "The email address of the new user.",
                  "type": "string",
                  "format": "email"
                },
                "password": {
                  "description": "The password for the new user.",
                  "type": "string"
                },
                "username": {
                  "description": "The username of the new user.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Bad request. Invalid input data"
          },
          "409": {
            "description": "Conflict. User already exists"
          }
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "API for user registration and management.",
    "title": "User Microservice API",
    "version": "1.0.0"
  },
  "paths": {
    "/login": {
      "post": {
        "description": "Authenticate and log in a user.",
        "tags": [
          "Users"
        ],
        "summary": "User Login",
        "parameters": [
          {
            "description": "User login data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "description": "The email address of the user.",
                  "type": "string",
                  "format": "email"
                },
                "password": {
                  "description": "The user's password.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "description": "Authentication token for the user's session",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid credentials"
          }
        }
      }
    },
    "/signup": {
      "post": {
        "description": "Register a new user account.",
        "tags": [
          "Users"
        ],
        "summary": "User Registration",
        "parameters": [
          {
            "description": "User registration data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username",
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "description": "The email address of the new user.",
                  "type": "string",
                  "format": "email"
                },
                "password": {
                  "description": "The password for the new user.",
                  "type": "string"
                },
                "username": {
                  "description": "The username of the new user.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Bad request. Invalid input data"
          },
          "409": {
            "description": "Conflict. User already exists"
          }
        }
      }
    }
  }
}`))
}
