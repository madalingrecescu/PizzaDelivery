// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostSignupCreatedCode is the HTTP code returned for type PostSignupCreated
const PostSignupCreatedCode int = 201

/*
PostSignupCreated User registered successfully

swagger:response postSignupCreated
*/
type PostSignupCreated struct {
}

// NewPostSignupCreated creates PostSignupCreated with default headers values
func NewPostSignupCreated() *PostSignupCreated {

	return &PostSignupCreated{}
}

// WriteResponse to the client
func (o *PostSignupCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// PostSignupBadRequestCode is the HTTP code returned for type PostSignupBadRequest
const PostSignupBadRequestCode int = 400

/*
PostSignupBadRequest Bad request. Invalid input data

swagger:response postSignupBadRequest
*/
type PostSignupBadRequest struct {
}

// NewPostSignupBadRequest creates PostSignupBadRequest with default headers values
func NewPostSignupBadRequest() *PostSignupBadRequest {

	return &PostSignupBadRequest{}
}

// WriteResponse to the client
func (o *PostSignupBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// PostSignupConflictCode is the HTTP code returned for type PostSignupConflict
const PostSignupConflictCode int = 409

/*
PostSignupConflict Conflict. User already exists

swagger:response postSignupConflict
*/
type PostSignupConflict struct {
}

// NewPostSignupConflict creates PostSignupConflict with default headers values
func NewPostSignupConflict() *PostSignupConflict {

	return &PostSignupConflict{}
}

// WriteResponse to the client
func (o *PostSignupConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(409)
}
