// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostSignupHandlerFunc turns a function with the right signature into a post signup handler
type PostSignupHandlerFunc func(PostSignupParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostSignupHandlerFunc) Handle(params PostSignupParams) middleware.Responder {
	return fn(params)
}

// PostSignupHandler interface for that can handle valid post signup params
type PostSignupHandler interface {
	Handle(PostSignupParams) middleware.Responder
}

// NewPostSignup creates a new http.Handler for the post signup operation
func NewPostSignup(ctx *middleware.Context, handler PostSignupHandler) *PostSignup {
	return &PostSignup{Context: ctx, Handler: handler}
}

/*
	PostSignup swagger:route POST /signup Users postSignup

# User Registration

Register a new user account.
*/
type PostSignup struct {
	Context *middleware.Context
	Handler PostSignupHandler
}

func (o *PostSignup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostSignupParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostSignupBody post signup body
//
// swagger:model PostSignupBody
type PostSignupBody struct {

	// The email address of the new user.
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// The password for the new user.
	// Required: true
	Password *string `json:"password"`

	// The username of the new user.
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this post signup body
func (o *PostSignupBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSignupBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostSignupBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

func (o *PostSignupBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post signup body based on context it is used
func (o *PostSignupBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostSignupBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSignupBody) UnmarshalBinary(b []byte) error {
	var res PostSignupBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
