// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/madalingrecescu/PizzaDelivery/internal/db/sqlc_pizzas (interfaces: Store)

// Package mockdb_pizzas is a generated GoMock package.
package mockdb_pizzas

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pizzas_db "github.com/madalingrecescu/PizzaDelivery/internal/db/sqlc_pizzas"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreatePizza mocks base method.
func (m *MockStore) CreatePizza(arg0 context.Context, arg1 pizzas_db.CreatePizzaParams) (pizzas_db.Pizza, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePizza", arg0, arg1)
	ret0, _ := ret[0].(pizzas_db.Pizza)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePizza indicates an expected call of CreatePizza.
func (mr *MockStoreMockRecorder) CreatePizza(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePizza", reflect.TypeOf((*MockStore)(nil).CreatePizza), arg0, arg1)
}

// DeletePizza mocks base method.
func (m *MockStore) DeletePizza(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePizza", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePizza indicates an expected call of DeletePizza.
func (mr *MockStoreMockRecorder) DeletePizza(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePizza", reflect.TypeOf((*MockStore)(nil).DeletePizza), arg0, arg1)
}

// GetAllPizzas mocks base method.
func (m *MockStore) GetAllPizzas(arg0 context.Context) ([]pizzas_db.Pizza, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPizzas", arg0)
	ret0, _ := ret[0].([]pizzas_db.Pizza)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPizzas indicates an expected call of GetAllPizzas.
func (mr *MockStoreMockRecorder) GetAllPizzas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPizzas", reflect.TypeOf((*MockStore)(nil).GetAllPizzas), arg0)
}

// GetPizzaById mocks base method.
func (m *MockStore) GetPizzaById(arg0 context.Context, arg1 int32) (pizzas_db.Pizza, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPizzaById", arg0, arg1)
	ret0, _ := ret[0].(pizzas_db.Pizza)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPizzaById indicates an expected call of GetPizzaById.
func (mr *MockStoreMockRecorder) GetPizzaById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPizzaById", reflect.TypeOf((*MockStore)(nil).GetPizzaById), arg0, arg1)
}

// GetPizzaByName mocks base method.
func (m *MockStore) GetPizzaByName(arg0 context.Context, arg1 string) (pizzas_db.Pizza, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPizzaByName", arg0, arg1)
	ret0, _ := ret[0].(pizzas_db.Pizza)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPizzaByName indicates an expected call of GetPizzaByName.
func (mr *MockStoreMockRecorder) GetPizzaByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPizzaByName", reflect.TypeOf((*MockStore)(nil).GetPizzaByName), arg0, arg1)
}

// UpdatePizza mocks base method.
func (m *MockStore) UpdatePizza(arg0 context.Context, arg1 pizzas_db.UpdatePizzaParams) (pizzas_db.Pizza, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePizza", arg0, arg1)
	ret0, _ := ret[0].(pizzas_db.Pizza)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePizza indicates an expected call of UpdatePizza.
func (mr *MockStoreMockRecorder) UpdatePizza(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePizza", reflect.TypeOf((*MockStore)(nil).UpdatePizza), arg0, arg1)
}
