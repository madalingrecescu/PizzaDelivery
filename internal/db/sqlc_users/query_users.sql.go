// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query_users.sql

package users_db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO users (
    username,
    email,
    hashed_password,
    phone_number

) VALUES (
    $1, $2, $3, $4
) RETURNING user_id, username, email, hashed_password, phone_number, role
`

type CreateAccountParams struct {
	Username       string `json:"username"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashedPassword"`
	PhoneNumber    string `json:"phoneNumber"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.Role,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT user_id, username, email, hashed_password, phone_number, role FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getAccount, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.Role,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT user_id, username, email, hashed_password, phone_number, role FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUsername, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.Role,
	)
	return i, err
}
